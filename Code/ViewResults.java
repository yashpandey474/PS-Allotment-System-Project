package project;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
/**
 *
 * @author PRIYANK
 */
@SuppressWarnings("serial")
public class ViewResults extends JFrame {
    static String id;
    String s;
    int allottedInRound = 1;
    boolean acceptedNow = false;
    Student stu;
    /**
     * Creates new form ViewResults
     */
    public ViewResults(String val) {
        id = val;
        stu = allotmentData.getStudent(id);
        s="Allotment Updates";
        initComponents();
    }


    public static String convertToMultiline(String orig)
    {
        return "<html>" + orig.replaceAll("\n", "<br>");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new JLabel();
        updatesLabel = new JLabel();
        acceptButton = new JButton();
        rejectButton = new JButton();
        doneButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 255, 204));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Practice School Allotment Portal");

        updatesLabel.setText("Allotment Updates:");
        updatesLabel.setVerticalAlignment(SwingConstants.TOP);

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        rejectButton.setText("Reject");
        rejectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectButtonActionPerformed(evt);
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 565, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(updatesLabel, GroupLayout.PREFERRED_SIZE, 563, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(acceptButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(rejectButton)
                                                .addGap(68, 68, 68)
                                                .addComponent(doneButton)))
                                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updatesLabel, GroupLayout.PREFERRED_SIZE, 180, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(acceptButton)
                                        .addComponent(rejectButton)
                                        .addComponent(doneButton))
                                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        rejectButton.setVisible(false);
        acceptButton.setVisible(false);
        doneButton.setVisible(false);
        if(allotmentData.allotted.containsKey(id)){
            //Gets allotment from map
            //allotment  = allotmentData.allotted.get(id);
        	s+=(stu);
            s+=("\n\nROUND " + (allotmentData.getRoundNo()-1) + " Results Declared");
            s+=("\nCONGRATULATIONS!");
            s+=("\t You Have Been Successfully Allotted.");
            String stationStr;
            if(allotmentData.allotted.get(id).equals(allotmentData.getDefaultAllotment().getId())){
            	stationStr = allotmentData.getDefaultAllotment().toString();
            }
            else {
            	stationStr = allotmentData.getStation(allotmentData.allotted.get(id)).toString();
            }
            
            s+=("\nYour allotment is: " + stationStr);
            updatesLabel.setText(convertToMultiline(s));
            if(allotmentData.rejected.contains(id)) {
                s+=("\nUnfortunately. We were not able to allot you a preference.\n You have been allotted a default station");
                updatesLabel.setText(convertToMultiline(s));
            }

            //If next round is being conducted, give choice to confirm
            if(allotmentData.getIsNextRound()) {
                s+=("\nDo you want to confirm this Allotment?");
                acceptButton.setVisible(true);
                rejectButton.setVisible(true);
                updatesLabel.setText(convertToMultiline(s));

            }
            //IF NO FURTHER ROUNDS BEING CONDUCTED
            else {
                doneButton.setVisible(true);
                s+=("\nThis was the final Round. Admin is not considering more allotment requests");
                s+=("\nFinal Allotment is given below");
                s+=("\nStudent: " + stu);
                s+=("\nStation: " + allotmentData.allotted.get(id));
                updatesLabel.setText(convertToMultiline(s));
                allotmentData.confirmed.put(id, allotmentData.allotted.get(id));
                allottedInRound = allotmentData.getRoundNo()-1;

            }
        }
        defaultStation b;
        //IF STUDENT CONFIRMED ALLOTMENT IN ONE OF PREVIOUS ROUNDS
        if(allotmentData.confirmed.containsKey(id)&&!acceptedNow) {
            doneButton.setVisible(true);
            b = allotmentData.getStation(allotmentData.confirmed.get(id));
            s+=("\nYOUR CONFIRMED ALLOTMENT IS GIVEN BELOW");
            s+=("\nStudent: " + stu);
            s+=("\nStation: " + b);
            s+=("\nYou were allotted in round: " + allottedInRound);
            updatesLabel.setText(convertToMultiline(s));
        }
    }// </editor-fold>

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        acceptedNow=true;
        String str="";
        str+=("\nAllotment Confirmed. Final Allotment is given below");
        str+=("\nStudent: " + stu);
        str+=("\nStation: " + allotmentData.allotted.get(id));
        //updatesLabel.setText(convertToMultiline(s));
        allotmentData.confirmed.put(id, allotmentData.allotted.get(id));
        allotmentData.allotted.remove(id);
        if(allotmentData.rejected.contains(id)) {
        	allotmentData.rejected.remove(allotmentData.rejected.indexOf(id));
        }
        allottedInRound = allotmentData.getRoundNo()-1;
        JOptionPane.showMessageDialog(null, str);
        stu.setViewedResults(true);
        this.dispose();
    }

    private void rejectButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	
    	//newPreferences pref = new newPreferences(id);
    	//pref.setVisible(true);
    	newPreferences pref = new newPreferences(id);
    	pref.setVisible(true);
    	
        
        this.dispose();
        // TODO add your handling code here:
    }

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stu.setViewedResults(true);
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewResults(id).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private JButton acceptButton;
    private JButton doneButton;
    private JLabel jLabel1;
    private JButton rejectButton;
    private JLabel updatesLabel;
    // End of variables declaration
}
